version: '3.8'

services:
  # Trading System Main Application
  trading-system:
    build: .
    container_name: midfreq-trading-system
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
      - TRADING_SYSTEM_ENV=production
    depends_on:
      - postgres
      - redis
    networks:
      - trading-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network

  # Web Dashboard (separate service for scalability)
  web-dashboard:
    build: .
    container_name: trading-web-dashboard
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - TRADING_SYSTEM_MODE=dashboard
    command: ["python", "web/app.py"]
    depends_on:
      - trading-system
    networks:
      - trading-network

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - postgres
    networks:
      - trading-network

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  trading-network:
    driver: bridge